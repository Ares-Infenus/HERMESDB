CREATE USER C##FINANZAS IDENTIFIED BY password;
GRANT CONNECT, RESOURCE TO C##FINANZAS;

CREATE TABLE FINANZAS.market (
    market_id INTEGER PRIMARY KEY,
    market_name VARCHAR2(255) UNIQUE NOT NULL,
    description CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE FINANZAS.asset_metadata (
    metadata_id INTEGER PRIMARY KEY,
    sector VARCHAR2(100) NOT NULL,
    instrument_type VARCHAR2(50) NOT NULL,
    country VARCHAR2(50) NOT NULL,
    description CLOB
);

CREATE TABLE FINANZAS.assets (
    assets_id INTEGER PRIMARY KEY,
    assets_name VARCHAR2(255) UNIQUE NOT NULL,
    market_id INTEGER NOT NULL,
    metadata_id INTEGER NOT NULL,
    is_active CHAR(1) CHECK (is_active IN ('Y', 'N')) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_market FOREIGN KEY (market_id) REFERENCES FINANZAS.market(market_id) ON DELETE CASCADE,
    CONSTRAINT fk_metadata FOREIGN KEY (metadata_id) REFERENCES FINANZAS.asset_metadata(metadata_id) ON DELETE CASCADE
);

CREATE TABLE FINANZAS.timeframe (
    timeframe_id INTEGER PRIMARY KEY,
    timeframe_name VARCHAR2(255) UNIQUE NOT NULL,
    minutes_interval INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE FINANZAS.data_sources (
    source_id INTEGER PRIMARY KEY,
    source_name VARCHAR2(100) NOT NULL,
    description CLOB
);

CREATE TABLE FINANZAS.technical_indicators (
    indicator_id INTEGER PRIMARY KEY,
    indicator_name VARCHAR2(50) NOT NULL,
    description CLOB,
    calculation_method CLOB
);

CREATE TABLE FINANZAS.market_data
(
    data_id INTEGER PRIMARY KEY,
    assets_id INTEGER NOT NULL,
    timeframe_id INTEGER NOT NULL,
    source_id INTEGER NOT NULL,
    price_type VARCHAR2(3) CHECK (price_type IN ('BID', 'ASK', 'MID')) NOT NULL,
    date_recorded TIMESTAMP NOT NULL,
    open FLOAT CHECK (open > 0) NOT NULL,
    high FLOAT NOT NULL,
    low FLOAT NOT NULL,
    close FLOAT CHECK (close > 0) NOT NULL,
    volume FLOAT CHECK (volume >= 0) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_assets_new FOREIGN KEY (assets_id) REFERENCES FINANZAS.assets(assets_id) ON DELETE CASCADE,
    CONSTRAINT fk_timeframe FOREIGN KEY (timeframe_id) REFERENCES FINANZAS.timeframe(timeframe_id) ON DELETE CASCADE,
    CONSTRAINT fk_source FOREIGN KEY (source_id) REFERENCES FINANZAS.data_sources(source_id) ON DELETE CASCADE
)
PARTITION BY RANGE (date_recorded)
INTERVAL (NUMTOYMINTERVAL(1, 'YEAR'))
(
    PARTITION p0 VALUES LESS THAN (TO_DATE('2000-01-01', 'YYYY-MM-DD'))
);


CREATE OR REPLACE TRIGGER trg_check_values
BEFORE INSERT OR UPDATE ON FINANZAS.market_data
FOR EACH ROW
BEGIN
    IF :NEW.high < :NEW.open OR :NEW.high < :NEW.close THEN
        RAISE_APPLICATION_ERROR(-20001, 'El valor de "high" debe ser mayor o igual a "open" y "close"');
    END IF;

    IF :NEW.low > :NEW.open OR :NEW.low > :NEW.close THEN
        RAISE_APPLICATION_ERROR(-20002, 'El valor de "low" debe ser menor o igual a "open" y "close"');
    END IF;
END;
/

CREATE TABLE FINANZAS.calculated_indicators (
    calc_id INTEGER PRIMARY KEY,
    data_id INTEGER NOT NULL,
    indicator_id INTEGER NOT NULL,
    value FLOAT NOT NULL,
    calculated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT fk_data FOREIGN KEY (data_id) REFERENCES FINANZAS.market_data(data_id) ON DELETE CASCADE,
    CONSTRAINT fk_indicator FOREIGN KEY (indicator_id) REFERENCES FINANZAS.technical_indicators(indicator_id) ON DELETE CASCADE
);


CREATE INDEX idx_market_data_assets_date ON FINANZAS.market_data (assets_id, date_recorded);
CREATE INDEX idx_market_data_timeframe_date ON FINANZAS.market_data (timeframe_id, date_recorded);
CREATE INDEX idx_market_data_assets_timeframe_date ON FINANZAS.market_data (assets_id, timeframe_id, date_recorded);

-- Vista materializada para resúmenes diarios
CREATE MATERIALIZED VIEW FINANZAS.mv_daily_summary
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
AS
SELECT
    assets_id,
    timeframe_id,
    source_id,
    TRUNC(date_recorded) AS day,
    AVG(open) AS avg_open,
    AVG(high) AS avg_high,
    AVG(low) AS avg_low,
    AVG(close) AS avg_close,
    SUM(volume) AS total_volume
FROM
    FINANZAS.market_data
GROUP BY
    assets_id,
    timeframe_id,
    source_id,
    TRUNC(date_recorded);

CREATE MATERIALIZED VIEW LOG ON FINANZAS.market_data
WITH ROWID, PRIMARY KEY (assets_id, timeframe_id, source_id, date_recorded)
INCLUDING NEW VALUES;

-- Compresión de columnas en tablas históricas
ALTER TABLE FINANZAS.market_data COMPRESS FOR OLTP;
ALTER TABLE FINANZAS.calculated_indicators COMPRESS FOR OLTP;

-- Auditoría de cambios
CREATE OR REPLACE TRIGGER trg_market_data_update
BEFORE UPDATE ON FINANZAS.market_data
FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER trg_assets_update
BEFORE UPDATE ON FINANZAS.assets
FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/